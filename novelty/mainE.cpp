////  main.cpp//  NoveltyEntropy////  Created by Arend Hintze on 9/13/14.//  Copyright (c) 2014 Arend Hintze. All rights reserved.//#include <stdio.h>#include <stdlib.h>#include <vector>#include <string>#include <map>#include <math.h>#include <iostream>using namespace std;int main(int argc, const char * argv[]){	int charToKMap[256];	int N=atoi(argv[2]);	string theKey="";	char C;	int sum=0;	double H=0.0;	double eH=0.0;	map<string,int> filter;	map<int,int> hist;	FILE *ctkF=fopen(argv[3],"r+t");	FILE *I=fopen(argv[1],"r+t");	for(int i=0;i<256;i++){		int d;		fscanf(ctkF,"%i\n",&d);		charToKMap[i]=d;	}	fclose(ctkF);	for(int i=0;i<N-1;i++){		fscanf(I,"%c",&C);		C='a'+(C%32);		theKey.push_back(C);	}	while(!feof(I)){		fscanf(I,"%c",&C);		theKey.erase(theKey.begin());		theKey.push_back(C);		C='a'+(C%32);//		printf("%s\n",theKey.c_str());		filter[theKey]++;		sum++;	}	fclose(I);	for(map<string,int>::iterator s=filter.begin();s!=filter.end();s++){		hist[s->second]++;	}	for(map<int,int>::iterator h=hist.begin();h!=hist.end();h++){		double p=(double)h->first/(double)sum;		H+=(double)h->second*(p*log(p)/log(2.0));		double eP=(double)h->first/pow(32.0,(double)N);		eH+=(double)h->second*(eP*log(eP)/log(2.0));		//printf("%i %i %f %f\n",h->first,h->second,p,eP);	}	H=-H;	double ePh=1.0/pow(32.0,(double)N);	eH+=(pow(32.0,(double)N)-(double)sum)*ePh*(log(ePh)/log(2.0));	double maxH=-log(1.0/pow(32.0,(double)N))/log(2.0);	eH=-eH;	printf("file: %s\n",argv[1]);	printf("entropy %f\n",H);	printf("error C entropy %f\n",eH);	printf("max H %f\n",maxH);	cout<<"I: "<<scientific;	cout<<(maxH-H)<<" eI: "<<(maxH-eH)<<endl;    return 0;}